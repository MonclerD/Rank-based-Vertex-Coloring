 int rank ← MPI_Comm_rank, n ← MPI_Comm_size
 enum states {UNDEC, INCOV, NOTCOV}
 enum message_types {ROUND, DATA, ROVER, FINISHED, TERMINATE}
 array of int msg ← [⊥, ⊥, ⊥, ⊥]
 matrix int A[n][n] ← ... // adjacency matrix
 list of list of int children ←[[3, 4, 7], [], [6], [2], [], [1], [],[5]]
 list of int parents ← [0, 5, 3, 0, 0, 7, 2, 0]
 set of int childs, neighs, neighs_rcvd, rover_rcvd, finish_rcvd ← ∅
 set of int removed_neighs, removed_childs ← ∅
 list of states states ← [UNDEC, INCOV, NOTCOV]
 int state ← UNDEC
 int round_num ← 0, max_count ← 4
 boolean finished_childs ← false, finished_all ← false, terminated ← false
 
 for int i ← 0 to n-1 do
     if A[rank][i] = 1 then
         neighs ← neighs ∪ {i}
     end if
 end for
 int parent ← parents[rank]
 set of int currneighs ← neighs, currchilds ← children[rank]
 
 while ¬terminated do
     boolean round_over ← false, neighs_over ← false, childs_over ← false
     boolean neighs_sent ← false
     rover_rcvd.clear, neighs_rcvd.clear
     removed_neighs.clear, removed_childs.clear
     
     if rank = 0 then
         msg[0], msg[1], msg[2] ← rank, ROUND, round_num
         
         for each child in currchilds do
             MPI_Send msg to child with tag ROUND
         end for
         
         if state = UNDEC then
             msg[1], msg[3] ← DATA, state
             for each node in currneighs do
                 MPI_Send msg to node with tag DATA
             end for
             neighs_sent ← true
         else
             neighs_over ← true, neighs_sent ← true
     end if
     
     while ¬round_over do
         msg ← MPI_Recv from MPI_ANY_SOURCE with tag MPI_ANY_TAG
         
         switch msg[1] do
             case ROUND: // Handle ROUND messages
             case DATA: // Handle DATA messages
             case ROVER: // Handle ROVER messages
             case FINISHED: // Handle FINISHED messages
             case TERMINATE: // Handle TERMINATE messages
         end switch
     end while
     
     round_num ← round_num + 1
     currneighs ← currneighs - removed_neighs
     currchilds ← currchilds - removed_childs
     
     if currneighs = ∅ and state = UNDEC then
         state ← NOTCOV
         
         if currchilds = ∅ then
             finished_all ← true
             msg[1] ← FINISHED
             MPI_Send msg to parent with tag FINISHED
         end if
     end if
 end while
 print "Rank: ", rank, ", state: ", state
